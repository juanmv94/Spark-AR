//https://www.shadertoy.com/view/MsGSRd

using namespace std;

// created by florian berger (flockaroo) - 2016
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

// single pass CFD
// ---------------
// this is some "computational flockarooid dynamics" ;)
// the self-advection is done purely rotational on all scales. 
// therefore i dont need any divergence-free velocity field. 
// with stochastic sampling i get the proper "mean values" of rotations 
// over time for higher order scales.
//
// try changing "RotNum" for different accuracies of rotation calculation
// for even RotNum uncomment the line #define SUPPORT_EVEN_ROTNUM

float getVal(Texture2d tex0, vec2 uv) {
    return length(tex0.sample(uv).xyz);
}
    
vec2 getGrad(Texture2d tex0, vec2 uv,float delta) {
    vec2 d=vec2(delta,0);
    return vec2(
        getVal(tex0, uv+d.xy)-getVal(tex0, uv-d.xy),
        getVal(tex0, uv+d.yx)-getVal(tex0, uv-d.yx)
    )/delta;
}

vec4 mainImage(Texture2d tex0, vec2 iResolution ) {
	/*vec2 uv = fragment(getVertexTexCoord());
    vec3 n = vec3(getGrad(tex0,uv,1.0/iResolution.y),150.0);
    //n *= n;
    n=normalize(n);
    vec4 fragColor=vec4(n,1);
    vec3 light = normalize(vec3(1,1,2));
    float diff=clamp(dot(n,light),0.5,1.0);
    float spec=clamp(dot(reflect(light,n),vec3(0,0,-1)),0.0,1.0);
    spec=pow(spec,36.0)*2.5;
    //spec=0.0;
	fragColor = tex0.sample(uv)*vec4(diff)+vec4(spec);
	return fragColor;*/
	return tex0.sample(getVertexTexCoord());
}
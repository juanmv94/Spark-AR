vec2 random2( vec2 p ) {
    return sin(vec2(dot(p,vec2(12.7,31.1)),dot(p,vec2(26.9,18.3))));
}

// @param[default=vec2(1.0,1.0)] screenSize
// @param[default=5.] scal
function<float(vec2)> cellular(vec2 screenSize, float scal) {
     // Creating and returning a lambda function
     return [](vec2 uv) {
		vec2 st=fragment(uv);
		st.y*=(screenSize.y/screenSize.x);
		float color = 0.;

		// Scale
		st *= scal;

		// Tile the space
		vec2 i_st = floor(st);
		vec2 f_st = fract(st);

		float m_dist = 1.;  // minimum distance

		for (int y= -1; y <= 1; y++) {
			for (int x= -1; x <= 1; x++) {
				// Neighbor place in the grid
				vec2 neighbor = vec2(float(x),float(y));

				// Random position from current + neighbor place in the grid
				vec2 point = random2(i_st + neighbor);

				// Animate the point
				point = 0.5 + 0.5*sin(std::getTime() + 6.2831*point);

				// Vector between the pixel and the point
				vec2 diff = neighbor + point - f_st;

				// Distance to the point
				float dist = length(diff);

				// Keep the closer distance
				m_dist = min(m_dist, dist);
			}
		}

		// Draw the min distance (distance field)
		color += m_dist;

		// Draw cell center
		//color += 1.-step(.02, m_dist);

		// Draw grid
		//color += step(.98, f_st.x) + step(.98, f_st.y);

		// Show isolines
		// color -= step(.7,abs(sin(27.0*m_dist)))*.5;

		return color;
	 };
}